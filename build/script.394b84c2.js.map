{"version":3,"sources":["utils/addGlobalEventListener.js","dragAndDrop.js","script.js"],"names":["addGlobalEventListener","type","selector","callback","document","addEventListener","e","target","matches","pointerDown","pointerMove","pointerUp","isTouchDevice","window","navigator","maxTouchPoints","msMaxTouchPoints","SetEvents","setup","OnDragComplete","selectedItem","selectedItemDimensions","BoundingRect","offsets","ClickOffset","top","left","cloneItem","cloneNode","classList","add","SetWidthAndHeight","width","height","ghost","InsertGhost","PositionClone","offsetX","offsetY","body","appendChild","pointerMoveFunction","removeEventListener","remove","replaceWith","clone","style","touches","clientY","clientX","parent","elementFromPoint","closest","insertBeforeTask","InsertBefore","insertBefore","Array","from","children","find","task","taskDimensions","element","dimensions","getBoundingClientRect","elementTop","elementLeft","offset","SaveLanesObject","SaveInLocalStorage","taskName","LOCAL_STORAGE_PREFIX","LOCAL_STORAGE_KEY","DEFAULT_LANES","laneNames","laneTasks","numberOfLanes","CURRENT_LANES","LoadFromLocalStorage","SaveLaneNames","SaveNumberOfLanes","SaveTaskNames","GetLaneNamesArray","length","lanes","querySelectorAll","i","taskNamesArray","GetLaneTasksArray","push","localStorage","setItem","JSON","stringify","lanesObject","getItem","parse","forEach","lane","name","GetLaneName","header","querySelector","innerHTML","taskNames","RenderLanes","laneName","CreateLane","CreateTask","AddTaskToLane","AddLaneToPage","laneTemplate","laneFragment","content","taskTemplate","taskFragment","DeleteTask","preventDefault","taskInput","taskText","value","renameInput","renameInputBG","PositionRenameInput","ShowRenameInput","HideRenameInput","parentTask","select"],"mappings":"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","file":"script.394b84c2.js","sourceRoot":"..","sourcesContent":["export default function addGlobalEventListener(type, selector, callback) {\r\n    document.addEventListener(type, e => {\r\n        if(e.target.matches(selector)) callback(e)\r\n    })\r\n}","import addGlobalEventListener from './utils/addGlobalEventListener.js';\r\n\r\n/* \r\n    1. Move with pointer Thing.\r\n    Hide Original and Add Clone to cursor position\r\n    2. Ghost at leave Placeholder\r\n    -- Create Ghost\r\n    -- Insert Ghost for selected Task\r\n    3. Dynamic Ghost - According to current pointer Position\r\n*/\r\n\r\nconst isTouchDevice = () => {  \r\n    return (('ontouchstart' in window) ||  \r\n      (navigator.maxTouchPoints > 0) ||  \r\n      (navigator.msMaxTouchPoints > 0));  \r\n}\r\n\r\nfunction SetEvents() {\r\n    if(isTouchDevice()) {\r\n        pointerDown = 'touchstart'\r\n        pointerMove = 'touchmove'\r\n        pointerUp = 'touchend'\r\n    }\r\n      \r\n    else {\r\n        pointerDown = 'mousedown'\r\n        pointerMove = 'mousemove'\r\n        pointerUp = 'mouseup'\r\n    }\r\n}\r\n\r\nlet pointerDown\r\nlet pointerMove\r\nlet pointerUp\r\nSetEvents()\r\n\r\nexport default function setup(OnDragComplete) {\r\n    addGlobalEventListener(pointerDown, \"[data-draggable]\", e => {\r\n        // Selected task Details\r\n        const selectedItem = e.target\r\n        const selectedItemDimensions = BoundingRect(selectedItem)\r\n        const offsets = ClickOffset(e, selectedItemDimensions.top, selectedItemDimensions.left)\r\n\r\n        // Cloning Selected task to move with pointer cursor\r\n        const cloneItem = selectedItem.cloneNode(true)\r\n        cloneItem.classList.add('dragging')\r\n        SetWidthAndHeight(cloneItem, selectedItemDimensions.width, selectedItemDimensions.height)\r\n\r\n        // Ghost - The grey like shadow where task element will be inserted if dropped\r\n        const ghost = selectedItem.cloneNode()\r\n        ghost.classList.add('ghost')\r\n        SetWidthAndHeight(ghost, selectedItemDimensions.width, selectedItemDimensions.height)\r\n        InsertGhost(ghost, e)\r\n        \r\n        // Hide Task and Attach clone to pointer\r\n        selectedItem.classList.add('hide') \r\n        PositionClone(cloneItem, e, offsets.offsetX, offsets.offsetY)\r\n        document.body.appendChild(cloneItem)\r\n        \r\n        const pointerMoveFunction = (e) => {\r\n            // We position clone and ghost dynamically w.r.t. current pointer position\r\n            PositionClone(cloneItem, e, offsets.offsetX, offsets.offsetY)\r\n            InsertGhost(ghost, e)\r\n        }\r\n\r\n        document.addEventListener(pointerMove, pointerMoveFunction);\r\n\r\n        document.addEventListener(pointerUp, (e) => {\r\n            // Clone has to be removed now and selected task to be dropped at ghost position\r\n            document.removeEventListener(pointerMove, pointerMoveFunction)\r\n            selectedItem.classList.remove('hide')\r\n            ghost.replaceWith(selectedItem)\r\n            cloneItem.remove()\r\n            // When all the drag and drop is Complete Run this callback\r\n            OnDragComplete()\r\n        })\r\n    })\r\n    \r\n}\r\n\r\nfunction PositionClone(clone, e, offsetX, offsetY) {\r\n    if(isTouchDevice()) {\r\n        clone.style.top = `${e.touches[0].clientY - offsetY}px`\r\n        clone.style.left = `${e.touches[0].clientX - offsetX}px`\r\n    }\r\n    else {\r\n        clone.style.top = `${e.clientY - offsetY}px`\r\n        clone.style.left = `${e.clientX - offsetX}px`\r\n    }\r\n}\r\n\r\nfunction InsertGhost(ghost, e) {\r\n    let target\r\n    if(isTouchDevice()) {\r\n        target = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY)\r\n    }\r\n    else {\r\n        target = e.target\r\n    }\r\n    const parent = target.closest('[data-draglist]')\r\n    if(parent == null) return\r\n    \r\n    const insertBeforeTask = InsertBefore(e)\r\n    if(insertBeforeTask == null) { \r\n        parent.appendChild(ghost)\r\n    }\r\n    else {\r\n        parent.insertBefore(ghost, insertBeforeTask)\r\n    }\r\n}\r\n\r\nfunction InsertBefore(e) {\r\n    let target\r\n    if(isTouchDevice()) {\r\n        target = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY)\r\n    }\r\n    else {\r\n        target = e.target\r\n    }\r\n    const parent = target.closest('[data-draglist]')\r\n    const tasksArray = Array.from(parent.children)\r\n    const insertBeforeTask = tasksArray.find(task => {\r\n        const taskDimensions = BoundingRect(task)\r\n        if(isTouchDevice()) {\r\n            return e.touches[0].clientY < taskDimensions.top + (taskDimensions.height / 2)\r\n        }\r\n        else {\r\n            return e.clientY < taskDimensions.top + (taskDimensions.height / 2)\r\n        }\r\n    })\r\n    return insertBeforeTask\r\n}\r\n\r\nexport function BoundingRect(element) {\r\n    let dimensions = {\r\n        width: element.getBoundingClientRect().width,\r\n        height: element.getBoundingClientRect().height,\r\n        top: element.getBoundingClientRect().top,\r\n        left: element.getBoundingClientRect().left,\r\n    }\r\n    return dimensions\r\n}\r\n\r\nfunction ClickOffset(e, elementTop, elementLeft) {\r\n    let offset\r\n    if(isTouchDevice()) {\r\n        offset = {\r\n            offsetX: e.touches[0].clientX - elementLeft,\r\n            offsetY: e.touches[0].clientY - elementTop\r\n        }\r\n    }\r\n    else {\r\n        offset = {\r\n            offsetX: e.clientX - elementLeft,\r\n            offsetY: e.clientY - elementTop\r\n        }\r\n    }\r\n    return offset\r\n}\r\n\r\nfunction SetWidthAndHeight(element, width, height) {\r\n    element.style.width = `${width}px`\r\n    element.style.height = `${height}px`\r\n}","/*\r\n    1. Save on Reload Tasks\r\n    -- Sync between Lanes and Javscript\r\n        -- Load Everthing just from javascript\r\n    -- Local Storage and Loading\r\n*/\r\nimport setupDragAndDrop, { BoundingRect as BoundingRect} from \"./dragAndDrop.js\";\r\nimport addGlobalEventListener from './utils/addGlobalEventListener.js';\r\n\r\nsetupDragAndDrop(OnDragComplete)\r\n\r\nfunction OnDragComplete() {\r\n    SaveLanesObject()\r\n    SaveInLocalStorage()\r\n}\r\n\r\nconst LOCAL_STORAGE_PREFIX = \"Trello-\"\r\nconst LOCAL_STORAGE_KEY = `${LOCAL_STORAGE_PREFIX}data`\r\n\r\nconst DEFAULT_LANES = {\r\n    laneNames: [\"Backlog\", \"Current\", \"Done\"],\r\n    laneTasks: [\r\n        [\"Demo Task 1\", \"Demo Task 2\"], \r\n        [\"Demo Task 3\"], \r\n        [\"Demo Task 4\", \"Demo Task 5\"]\r\n    ],\r\n    numberOfLanes: 3\r\n}\r\nlet CURRENT_LANES = LoadFromLocalStorage() || DEFAULT_LANES\r\n\r\nRenderLanes()\r\n\r\n// Lane Object in JavaScript\r\n\r\nfunction SaveLanesObject() {\r\n    SaveLaneNames()\r\n    SaveNumberOfLanes()\r\n    SaveTaskNames()\r\n}\r\n\r\nfunction SaveLaneNames() {\r\n    CURRENT_LANES.laneNames = GetLaneNamesArray()\r\n}\r\n\r\nfunction SaveNumberOfLanes() {\r\n    CURRENT_LANES.numberOfLanes = CURRENT_LANES.laneNames.length\r\n}\r\n\r\nfunction SaveTaskNames() {\r\n    const lanes = Array.from(document.querySelectorAll('.lane'))\r\n    let laneTasks = []\r\n    for (let i = 0; i < CURRENT_LANES.numberOfLanes; i++) {\r\n        let taskNamesArray = GetLaneTasksArray(lanes[i])\r\n        laneTasks.push(taskNamesArray)\r\n    }\r\n    CURRENT_LANES.laneTasks = laneTasks\r\n}\r\n\r\n// Local Storage\r\n\r\nfunction SaveInLocalStorage() {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(CURRENT_LANES))\r\n}\r\n\r\nfunction LoadFromLocalStorage() {\r\n    const lanesObject = localStorage.getItem(LOCAL_STORAGE_KEY)\r\n    return JSON.parse(lanesObject)\r\n}\r\n\r\n// JavaScript/Html Interaction\r\n\r\nfunction GetLaneNamesArray() {\r\n    let laneNames = []\r\n    const lanes = document.querySelectorAll('.lane')\r\n    lanes.forEach(lane => {\r\n        let name = GetLaneName(lane)\r\n        laneNames.push(name)\r\n    })\r\n    return laneNames\r\n}\r\n\r\nfunction GetLaneName(lane) {\r\n    const header = lane.querySelector('.header')\r\n    return header.innerHTML\r\n}\r\n\r\nfunction GetLaneTasksArray(lane) {\r\n    let taskNames = []\r\n    const tasks = lane.querySelectorAll('.task')\r\n    tasks.forEach(task => {\r\n        const taskName = task.querySelector('.task-text')\r\n        const name = taskName.innerHTML\r\n        taskNames.push(name)\r\n    })\r\n    return taskNames\r\n}\r\n\r\n// Rendering Lanes from JavaScript Object (CURRENT_LANES)\r\n\r\nfunction RenderLanes() {\r\n    for (let i = 0; i < CURRENT_LANES.numberOfLanes; i++) {\r\n        let laneName = CURRENT_LANES.laneNames[i]\r\n        let lane = CreateLane(laneName)\r\n\r\n        let taskNamesArray = CURRENT_LANES.laneTasks[i]\r\n        taskNamesArray.forEach(taskName => {\r\n            let task = CreateTask(taskName)\r\n            AddTaskToLane(lane, task)\r\n        })\r\n\r\n        AddLaneToPage(lane)\r\n    }\r\n}\r\n\r\n// Creating from Template, Lane and Task\r\n\r\nfunction CreateLane(name) {\r\n    const laneTemplate = document.querySelector('.template-lane')\r\n    let laneFragment = laneTemplate.content.cloneNode(true)\r\n    let laneHeader = laneFragment.querySelector('.header')\r\n    laneHeader.innerHTML = `${name}`\r\n    return laneFragment\r\n}\r\n\r\nfunction CreateTask(taskName) {\r\n    const taskTemplate = document.querySelector('.template-task')\r\n    let taskFragment = taskTemplate.content.cloneNode(true)\r\n    let taskText = taskFragment.querySelector('.task-text')\r\n    taskText.innerHTML = `${taskName}`\r\n    return taskFragment\r\n}\r\n\r\n// Adding Elements To Dom\r\n\r\nfunction AddTaskToLane(lane, task) {\r\n    const taskList = lane.querySelector('.tasks')\r\n    taskList.appendChild(task)\r\n}\r\n\r\nfunction AddLaneToPage(lane) {\r\n    let lanes = document.querySelector('.lanes')\r\n    lanes.appendChild(lane)\r\n}\r\n\r\n// Task Input New Task\r\n\r\naddGlobalEventListener('submit', \".form-task\", e => {\r\n    e.preventDefault()\r\n    const taskInput = e.target.querySelector('.task-input')\r\n    const taskText = taskInput.value\r\n    \r\n    if(taskText === '') return\r\n    const lane = e.target.closest('.lane')\r\n    const newTask = CreateTask(taskText)\r\n    AddTaskToLane(lane, newTask)\r\n    \r\n    SaveLanesObject()\r\n    SaveInLocalStorage()\r\n\r\n    taskInput.value = ''\r\n})\r\n\r\n// Remove Task Functionality\r\n\r\naddGlobalEventListener('click', \".task-delete\", e => {\r\n    DeleteTask(e)\r\n    SaveLanesObject()\r\n    SaveInLocalStorage()\r\n})\r\n\r\nfunction DeleteTask(e) {\r\n    const parent = e.target.closest('.task')\r\n    parent.remove()\r\n}\r\n\r\n// Edit Task Name Functionality\r\n\r\nlet taskName;\r\nconst renameInput = document.querySelector('.task-rename-input')\r\nconst renameInputBG = document.querySelector('.input-rename-bg')\r\n\r\n/* \r\n    Input is connected to a element called taskName\r\n    We simplly keep changing to what that task name is pointing to \r\n    with each click on edit icon in a task \r\n*/\r\n\r\nrenameInput.addEventListener('input', () => {\r\n    if(taskName) {\r\n        taskName.innerHTML = renameInput.value\r\n    }\r\n})\r\n\r\naddGlobalEventListener('click', \".task-rename\", e => {\r\n    const parentTask = e.target.closest('.task')\r\n    const parentDimensions = BoundingRect(parentTask)\r\n\r\n    PositionRenameInput(parentDimensions)\r\n    ShowRenameInput()\r\n\r\n    taskName = parentTask.querySelector('.task-text')\r\n    renameInput.value = taskName.innerHTML\r\n    renameInput.select();\r\n})\r\n\r\naddGlobalEventListener('submit', \".form-task-rename\", e => {\r\n    e.preventDefault()\r\n    HideRenameInput()\r\n\r\n//  When done we save the current state\r\n    SaveLanesObject()\r\n    SaveInLocalStorage()\r\n})\r\n\r\naddGlobalEventListener('click', \".input-rename-bg\", e => {\r\n    HideRenameInput()\r\n\r\n//  When done we save the current state\r\n    SaveLanesObject()\r\n    SaveInLocalStorage()\r\n})\r\n\r\nfunction PositionRenameInput(dimensions) {\r\n    renameInput.style.width = `${dimensions.width}px`\r\n    renameInput.style.top = `${dimensions.top}px`\r\n    renameInput.style.left = `${dimensions.left}px`\r\n}\r\n\r\nfunction ShowRenameInput() {\r\n    renameInput.classList.add('active')\r\n    renameInputBG.classList.add('active')\r\n}\r\n\r\nfunction HideRenameInput() {\r\n    renameInput.classList.remove('active')\r\n    renameInputBG.classList.remove('active')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]}